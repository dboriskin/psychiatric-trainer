import React, { useEffect, useState } from 'react';
import { TelegramMainButton, TelegramBackButton, ButtonFallback, useTelegram } from '../telegram';
import { useNavigationStore } from '../../store/navigationStore';
import { CaseDetail, PatientNote } from '../../services/api';
import { CaseNavigation } from '../base/CaseNavigation';

interface PatientNotesProps {
  caseDetail: CaseDetail;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
const NoteCard: React.FC<{ note: PatientNote; index: number }> = ({ note, index }) => {
  const [expanded, setExpanded] = useState(false);
  const { webApp } = useTelegram();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏
  let icon = 'üìù';
  let bgColor = 'bg-blue-50 border-blue-200';
  let iconBg = 'bg-blue-100';
  
  if (note.title.toLowerCase().includes('–æ –ø–∞—Ü–∏–µ–Ω—Ç')) {
    icon = 'üë§';
    bgColor = 'bg-indigo-50 border-indigo-200';
    iconBg = 'bg-indigo-100';
  } else if (note.title.toLowerCase().includes('–∞–Ω–∞–º–Ω–µ–∑')) {
    icon = 'üìã';
    bgColor = 'bg-amber-50 border-amber-200';
    iconBg = 'bg-amber-100';
  } else if (note.title.toLowerCase().includes('–Ω–∞–±–ª—é–¥–µ–Ω–∏')) {
    icon = 'üëÅÔ∏è';
    bgColor = 'bg-emerald-50 border-emerald-200';
    iconBg = 'bg-emerald-100';
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  const formatContent = (content: string) => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –¥–µ—Ñ–∏—Å–∞)
    if (content.includes('\n- ')) {
      return (
        <ul className="space-y-2 mt-2">
          {content.split('\n- ').map((item, idx) => {
            if (idx === 0 && !item.trim().startsWith('-')) {
              return item ? <p key="intro" className="mb-2">{item}</p> : null;
            }
            return item.trim() ? (
              <li key={idx} className="flex items-start">
                <span className="inline-block w-1.5 h-1.5 rounded-full bg-primary mt-1.5 mr-2 flex-shrink-0"></span>
                <span>{item.trim()}</span>
              </li>
            ) : null;
          })}
        </ul>
      );
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    return (
      <p className="whitespace-pre-line">
        {content.split('\n').map((line, idx) => (
          <React.Fragment key={idx}>
            {line}
            {idx < content.split('\n').length - 1 && <br />}
          </React.Fragment>
        ))}
      </p>
    );
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
  const handleExpand = () => {
    setExpanded(!expanded);
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (webApp?.HapticFeedback) {
      webApp.HapticFeedback.selectionChanged();
    }
  };
  
  return (
    <div 
      className={`mb-6 ${bgColor} border rounded-xl shadow-sm transition-all duration-300 overflow-hidden`}
      style={{ 
        transform: expanded ? 'scale(1.02)' : 'scale(1)',
        transition: 'transform 0.2s ease'
      }}
    >
      <div 
        className="flex items-center p-4 cursor-pointer"
        onClick={handleExpand}
      >
        <div className={`${iconBg} w-10 h-10 rounded-full flex items-center justify-center mr-3 text-lg`}>
          {icon}
        </div>
        <div className="flex-1">
          <h2 className="text-lg font-bold">{note.title}</h2>
          {!expanded && (
            <p className="text-sm text-gray-500 mt-1">
              {note.content.length > 100 
                ? `${note.content.substring(0, 100)}...` 
                : note.content}
            </p>
          )}
        </div>
        <div className="ml-2 text-gray-400">
          {expanded ? '‚ñ≤' : '‚ñº'}
        </div>
      </div>
      
      {expanded && (
        <div className="px-4 pb-4 pt-2 border-t border-gray-200">
          <div className="text-gray-700">
            {formatContent(note.content)}
          </div>
          
          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
          {index === 0 && (
            <div className="mt-4 pt-3 border-t border-gray-200">
              <button 
                className="text-sm text-primary font-medium flex items-center"
                onClick={(e) => {
                  e.stopPropagation();
                  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–¥–µ—Å—å
                  if (webApp?.HapticFeedback) {
                    webApp.HapticFeedback.impactOccurred('light');
                  }
                }}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export const PatientNotes: React.FC<PatientNotesProps> = ({ caseDetail }) => {
  const { setStage, goBack } = useNavigationStore();
  const [activeNote, setActiveNote] = useState<number | null>(null);
  const { webApp } = useTelegram();

  useEffect(() => {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('PatientNotes component mounted:', caseDetail?.title);
  }, [caseDetail]);

  const handleContinue = () => {
    console.log('PatientNotes: continuing to next stage (patient-stories)');
    if (webApp?.HapticFeedback) {
      webApp.HapticFeedback.impactOccurred('medium');
    }
    setStage('patient-stories');
  };

  const handleBack = () => {
    console.log('PatientNotes: going back to cases list');
    goBack();
  };

  return (
    <div className="min-h-screen pb-20">
      <div className="bg-primary text-white p-4">
        <h1 className="text-xl font-bold">{caseDetail.title}</h1>
        <p className="text-sm opacity-90">–ó–∞–º–µ—Ç–∫–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ</p>
      </div>

      <div className="p-4">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–µ–π—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <CaseNavigation className="mb-4" />
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ */}
        <div className="bg-white rounded-xl shadow-md p-4 mb-6">
          <div className="flex items-center mb-3">
            <div className="w-12 h-12 bg-gray-200 rounded-full mr-3 flex items-center justify-center text-xl">
              {caseDetail.patientName.charAt(0)}
            </div>
            <div>
              <h2 className="text-lg font-bold">{caseDetail.patientName}, {caseDetail.patientAge} –ª–µ—Ç</h2>
              <p className="text-sm text-gray-600">ID: {caseDetail.id}</p>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-3 mt-4">
            <div className="bg-gray-50 rounded-lg p-3">
              <p className="text-xs text-gray-500 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</p>
              <p className="font-medium">{caseDetail.categoryId.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</p>
            </div>
            <div className="bg-gray-50 rounded-lg p-3">
              <p className="text-xs text-gray-500 mb-1">–°—Ç–∞—Ç—É—Å</p>
              <p className="font-medium text-green-600">–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π</p>
            </div>
          </div>
        </div>

        {/* –ó–∞–º–µ—Ç–∫–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ */}
        <h3 className="text-lg font-bold mb-3">–ò—Å—Ç–æ—Ä–∏—è –±–æ–ª–µ–∑–Ω–∏</h3>
        
        {caseDetail.patientNotes.map((note, index) => (
          <NoteCard 
            key={index} 
            note={note} 
            index={index} 
          />
        ))}
        
        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-blue-50 border-l-4 border-blue-500 p-3 text-blue-700 mt-4">
          <p className="text-sm">
            <span className="font-bold">–í–∞–∂–Ω–æ:</span> –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
          </p>
        </div>
      </div>

      {/* Back Button */}
      <TelegramBackButton onClick={handleBack} />

      {/* Main Button */}
      <TelegramMainButton
        text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        onClick={handleContinue}
      />
      
      {/* Fallback –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ */}
      <ButtonFallback
        mainButtonText="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        onMainButtonClick={handleContinue}
        onBackButtonClick={handleBack}
      />
    </div>
  );
};